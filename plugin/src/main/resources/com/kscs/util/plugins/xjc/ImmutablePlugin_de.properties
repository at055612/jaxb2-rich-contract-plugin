usage=Veranlasst XJC dazu, die generierten Klassen unver\u00E4nderlich zu machen.\nAlle set-Methoden werden protected gemacht, collections werden als "Collections.unmodifiableCollection" erzeugt.
usage.constructorAccess=Setzt die Sichtbarkeit des von JAXB geforderten argumentlosen Konstruktors auf den angegebenen Wert \
  ("public", "private", "protected", "default"). Die JAXB-Spezifikation fordert eigentlich, dass der Konstruktor "public" sein \
  soll, aber in vielen Implementierungen funktioniert auch "protected". Diese Option wurde eingef\u00FChrt, da es normalerweise \
  wenig sinnvoll ist, ein leeres Objekt zu erzeugen, das danach nicht mehr \
  ver\u00E4ndert werden kann. Dennoch ist dies nicht standardkonform und daher mit Vorsicht zu benutzen.
usage.generateModifier=Eine innere Klasse erzeugen, die dennoch eine Zustands\u00E4nderung des darunterliegenden Objekts erlaubt.
usage.modifierClassName=Name der generierten Mutator-Klasse (wenn generateModifier=y)
usage.modifierMethodName=Name der generierten methode zum Abruf einer Instanz der Mutator-Klasse (wenn generateModifier=y)
usage.fake=Nur f\u00FCr Test und Debug: Es wird nichts wirklich unver\u00E4nderlich gemacht, aber das Plugin bleibt aktiv.
usage.collectionsAsIterable=Mehrwertige Eigenschaften werden als der angegebene Typ, der java.util.Iterable implementiert, deklariert, anstelle von List, um deklarative Unver\u00E4nderlichkeit sicherzustellen.
error.immutableAndConstrainedProperties=Das "Immutable"-Plugin kann nicht zusammen mit dem "Constrained-Properties" plugin verwendet werden. Ein Objekt ist entweder unver\u00E4nderlich, oder es kann \u00C4nderungsnachrichten senden.
comment.constructor=Generiert durch das "Immutable"-Plugin, um das Erzeugen leerer unver\u00E4nderlicher Objekte zu unterbinden.


